#!/usr/bin/env perl6
use YAMLish;
use Bkp;

sub log ( Str:D $message ) {
    return unless %*ENV<BKP_LOG>;
    my $time = DateTime.now.truncated-to('second');
    say "$time bkp: [$*PID] $message";
}

sub render-src ( Str:D $script, Str:D $template ) {
    my $proc = shell $script, :out;
    my $yaml = q{};
    while my $item = $proc.out.get {
        my $chunk = $template.clone;
        $chunk ~~ s:g[ '{{' \s* item \s* '}}' ] = $item;
        $yaml  ~= $chunk;
    }
    return load-yaml($yaml);
}

sub load-profiles ( FilePath $filename ) {
    my %config = load-yaml $filename.IO.slurp;
    my %profile_of;
    if %config<src><class> {
        my $prefix = $filename ~~ rx{:i (<-[ / ]>+) \. ya?ml $}
          ?? ~$0 !! $filename.IO.basename.lc;
        %config<dst><prefix> //= $prefix;
        %profile_of{$prefix} = %config;
        return %profile_of;
    }

    if %config<src><script>:exists {
        my %src = render-src( %config<src><script>, %config<src><template> );
        %config<src> = %src;
    }

    my %src_of = %config<src>:delete;
    for %src_of.keys.sort -> $name {
        my %profile;
        %profile{$_}          = %config{$_}.clone for %config.keys;
        %profile<src>         = %src_of{$name};
        %profile<dst><prefix> = $name;
        %profile_of{$name}    = %profile;
    }
    return %profile_of;
}

sub load-class ( Str:D $namespace, Str:D $class ) {
    my $package = "Bkp::{$namespace.lc.tc}::{$class.lc.tc}";
    try require ::($package);
    fail "Failed to load $package" if ::($package) ~~ Failure;
    return ::($package);
}

sub add-middleware ( $src, $namespace, %profile ) {
    return $src if !%profile{$namespace};
    return load-class( $namespace, %profile{$namespace}<class>:delete )
         . new( |%profile{$namespace}, src => $src );
}

sub get-dst (%profile) {
    my $src = load-class( 'src', %profile<src><class> )
            . new( |%profile<src> );
    $src = add-middleware $src, 'compress', %profile;
    $src = add-middleware $src, 'crypt', %profile;
    $src = add-middleware $src, 'shape', %profile;
    my $dst = load-class( 'dst', %profile<dst><class> )
            . new( |%profile<dst>, src => $src );
    $dst.mount;
    return $dst;
}

multi MAIN (*@configs) {
    return unless @configs.elems;
    log "Got configs: $_" for @configs;
  CONFIG: for @configs -> $config {
        log $config.IO.basename ~ ' started';
        my %profile_of;
        try {
            CATCH {
                say $config.IO.basename ~ " loading failed - skipping";
                .Str.say;
                next CONFIG;
            }
            %profile_of = load-profiles $config;
            log "Got profiles: $_" for %profile_of.keys.sort;
        }

      PROFILE: for %profile_of.keys.sort -> $name {
          ATTEMPT: for ^10 -> $attempt {
                log $config.IO.basename ~ ":$name started [$attempt]";
                my $dst = get-dst %profile_of{$name};
                try {
                    CATCH {
                        say $config.IO.basename ~ ":$name failed [$attempt]";
                        say $config.IO.basename ~ ":$name exception: " ~ .Str;
                        $dst.src.KILL;
                        sleep $attempt * 180;
                        next ATTEMPT;
                    }
                    $dst.SEND;
                }
                $dst.src.clean-up;
                $dst.umount;
                log $config.IO.basename ~ ":$name finished [$attempt]";
                if %profile_of{$name}<post>:exists {
                    log $config.IO.basename ~ ":$name post hook started";
                    shell %profile_of{$name}<post>;
                    log $config.IO.basename ~ ":$name post hook finished";
                }
                next PROFILE;
            }
            say 'BACKUP ' ~ $config.IO.basename ~ ":$name FAILED!";
        }
        log $config.IO.basename ~ ' finished';
    }
}

multi MAIN ( 'list', FilePath $config, Bool :$bytes = False, Str :$profile ) {
    my %profile_of = load-profiles $config;
    for %profile_of.keys.sort -> $name {
        next if $profile.defined && $profile ne $name;
        state $i = 1;
        if %profile_of.keys.elems > 1 && !$profile.defined {
            say "" if $i > 1;
            say "$name:";
            say "";
        }

        my $dst     = get-dst %profile_of{$name};
        if $bytes {
            say "$_{'file'} $_{'size'}" for $dst.all-archives;
        }
        else {
            ARCHIVE: for $dst.all-archives -> $archive {
                my @suffixes = (
                    1099511627776 => 'T',
                    1073741824    => 'G',
                    1048576       => 'M',
                    1024          => 'K',
                );
                for @suffixes {
                    my ( $factor, $suffix ) = $_.kv;
                    if $archive<size> >= $factor {
                        my $human_readable_size = ( $archive<size> / $factor ).fmt: "%.1f$suffix";
                        say "$archive<file> $human_readable_size";
                        next ARCHIVE;
                    }
                }
                say "$archive<file> $archive<size>B";
            }
        }
        $dst.umount;
        $i++;
    }
}

multi MAIN ( 'download', FilePath $config, Str $archive,
    Str  :$profile,
    Str  :$filename = $archive,
    Bool :$force    = False,
) {
    my %profile_of = load-profiles $config;
    my $name       = $profile;

    if $name.defined {
        fail "profile $name not known in $config"
            unless %profile_of{$name}:exists;
    }
    else {
        fail "--profile should be specified for $config"
            if %profile_of.keys.elems > 1;
        $name = %profile_of.keys.first;
    }

    my $dst = get-dst %profile_of{$name};
    if ( $filename eq '-' ) {
        run 'cat', :in( $dst.out($archive) );
    }
    else {
        if ($filename.IO.e) {
            $force ?? $filename.IO.unlink
                   !! fail "$filename exists, use --force option";
        }
        my $fh = open $filename, :bin, :w;
        run 'cat', :in( $dst.out($archive) ), :out($fh);
    }
    $dst.umount;
}

multi MAIN ( 'list-profiles', FilePath $config ) {
    my %profile_of = load-profiles $config;
    %profile_of.keys>>.say;
}
