#!/usr/bin/env perl6
use YAMLish;
use Bkp;

sub log ( Str:D $message ) {
    return unless %*ENV<BKP_LOG>;
    my $time = DateTime.now.truncated-to('second');
    note "$time bkp: [$*PID] $message";
}

sub load-profile ( FilePath $filename ) {
    my %profile = load-yaml $filename.IO.slurp;
    my $prefix = $filename ~~ rx{:i (<-[ / ]>+) \. ya?ml $}
      ?? ~$0 !! $filename.IO.basename.lc;
    %profile<dst><prefix> //= $prefix;
    return %profile;
}

sub load-class ( Str:D $namespace, Str:D $class ) {
    my $package = "Bkp::{$namespace.lc.tc}::{$class.lc.tc}";
    try require ::($package);
    fail "Failed to load $package" if ::($package) ~~ Failure;
    return ::($package);
}

sub add-middleware ( $src, $namespace, %profile ) {
    return $src if !%profile{$namespace};
    return load-class( $namespace, %profile{$namespace}<class>:delete )
         . new( |%profile{$namespace}, src => $src );
}

sub get-dst (%profile) {
    my $src = load-class( 'src', %profile<src><class>:delete )
            . new( |%profile<src> );
    $src = add-middleware $src, 'compress', %profile;
    $src = add-middleware $src, 'crypt', %profile;
    $src = add-middleware $src, 'shape', %profile;
    my $dst = load-class( 'dst', %profile<dst><class> )
            . new( |%profile<dst>, src => $src );
    $dst.mount;
    return $dst;
}

multi MAIN (*@profiles) {
    return unless @profiles.elems;
    log "Got profile: $_" for @profiles;
  PROFILE: for @profiles -> FilePath $profile {
      ATTEMPT: for ^5 -> $attempt {
            sleep $attempt * 10;
            log $profile.IO.basename ~ " started [$attempt]";
            my %profile = load-profile $profile;
            my $dst     = get-dst %profile;
            try {
                CATCH {
                    say $profile.IO.basename ~ " failed [$attempt]";
                    $dst.src.clean-up;
                    next ATTEMPT;
                }
                $dst.SEND;
                $dst.src.clean-up;
                $dst.umount;
            }
            log $profile.IO.basename ~ " finished [$attempt]";
            next PROFILE;
        }
        say 'BACKUP ' ~ $profile.IO.basename ~ ' FAILED!';
    }
}

multi MAIN ( 'list', FilePath $profile, Bool :$bytes = False ) {
    my %profile = load-profile $profile;
    my $dst     = get-dst %profile;
    if $bytes {
        say "$_{'file'} $_{'size'}" for $dst.all-archives;
    }
    else {
        ARCHIVE: for $dst.all-archives -> $archive {
            my @suffixes = (
                1099511627776 => 'T',
                1073741824    => 'G',
                1048576       => 'M',
                1024          => 'K',
            );
            for @suffixes {
                my ( $factor, $suffix ) = $_.kv;
                if $archive<size> >= $factor {
                    my $human_readable_size = ( $archive<size> / $factor ).fmt: "%.1f$suffix";
                    say "$archive<file> $human_readable_size";
                    next ARCHIVE;
                }
            }
            say "$archive<file> $archive<size>B";
        }
    }
    $dst.umount;
}

multi MAIN ( 'download', FilePath $profile, Str $archive,
    Str  :$filename = $archive,
    Bool :$force    = False,
) {
    my %profile = load-profile $profile;
    my $dst     = get-dst %profile;
    if ( $filename eq '-' ) {
        run 'cat', :in( $dst.out($archive) );
    }
    else {
        if ($filename.IO.e) {
            $force ?? $filename.IO.unlink
                   !! fail "$filename exists, use --force option";
        }
        my $fh = open $filename, :bin, :w;
        run 'cat', :in( $dst.out($archive) ), :out($fh);
    }
    $dst.umount;
}
